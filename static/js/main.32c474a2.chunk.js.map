{"version":3,"sources":["components/Bars.js","components/NewBars.js","components/BarSlider.js","components/BarValues.js","components/MergeSort.js","components/QuickSort.js","components/InsertionSort.js","components/BubbleSort.js","components/Timer.js","components/Alerts.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Bars","numBars","bars","minBarValue","maxBarValue","createBarArray","setBars","useEffect","map","value","index","style","backgroundColor","height","margin","padding","width","className","NewBars","Button","onClick","BarSlider","handleBarSliderChange","type","min","max","onChange","BarValues","handleMinValue","handleMaxValue","Stack","direction","gap","MergeSort","console","log","QuickSort","InsertionSort","BubbleSort","Timer","Alerts","showAlert","setShowAlert","Alert","variant","onClose","dismissible","Footer","App","useState","setNumBars","setMinBarValue","setMaxBarValue","array","i","push","Math","floor","random","e","parseInt","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32c474a2.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect } from \"react\";\n\nconst Bars = ({\n  numBars,\n  minBarValue,\n  maxBarValue,\n  bars,\n  setBars,\n  createBarArray,\n}) => {\n  // const [bars, setBars] = useState([]);\n\n  // const randomNumsFromRange = (min, max) => {\n  //   return Math.floor(Math.random() * (max - min + 1) + min);\n  // };\n\n  // const createBarArray = () => {\n  //   let array = [];\n\n  //   for (let i = 0; i < numBars; i++) {\n  //     array.push(randomNumsFromRange(minBarValue, maxBarValue));\n  //   }\n  //   setBars(array);\n  // };\n\n  useEffect(() => {\n    createBarArray();\n    // console.log(\"this is the bars to be rendered\", bars);\n  }, [numBars]);\n\n  // console.log(bars);\n  return bars.map((value, index) => (\n    <div\n      style={{\n        backgroundColor: \"grey\",\n        height: `${value}px`,\n        margin: \"0 2px\",\n        padding: \"2px\",\n        width: \"75%\",\n      }}\n      key={index}\n    >\n      <p className=\"bar-value d-flex justify-content-center\">{value}</p>\n    </div>\n  ));\n};\n\nexport default Bars;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst NewBars = ({ createBarArray }) => {\n  // const newBarsButton = () => {\n  //   console.log(\"generating new bars\");\n  // };\n\n  return (\n    <Button className=\"sort-button align-self-center\" onClick={createBarArray}>\n      Generate New Bars\n    </Button>\n  );\n};\n\nexport default NewBars;\n","import React from \"react\";\n\nconst BarSlider = ({ numBars, handleBarSliderChange }) => {\n  return (\n    <div>\n      <input\n        type=\"range\"\n        min=\"5\"\n        max=\"50\"\n        value={numBars}\n        onChange={handleBarSliderChange}\n      />\n      <p className=\"footer-text\">Number of Bars: {numBars}</p>\n    </div>\n  );\n};\n\nexport default BarSlider;\n","import React from \"react\";\nimport Stack from \"react-bootstrap/Stack\";\n\nconst BarValues = ({\n  minBarValue,\n  maxBarValue,\n  handleMinValue,\n  handleMaxValue,\n}) => {\n  return (\n    <div>\n      <Stack direction=\"horizontal\" gap={3}>\n        <Stack>\n          <p className=\"footer-text\">Min Value </p>\n          <input\n            type=\"number\"\n            className=\"min-max-value\"\n            min=\"20\"\n            value={minBarValue}\n            onChange={handleMinValue}\n          />\n        </Stack>\n        <Stack>\n          <p className=\"footer-text\">Max Value </p>\n          <input\n            type=\"number\"\n            className=\"min-max-value\"\n            max=\"500\"\n            value={maxBarValue}\n            onChange={handleMaxValue}\n          />\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nexport default BarValues;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst MergeSort = () => {\n  const mergeSortButton = () => {\n    console.log(\"merge sort button\");\n  };\n  return (\n    <Button className=\"sort-button align-self-center\" onClick={mergeSortButton}>\n      Merge Sort\n    </Button>\n  );\n};\n\nexport default MergeSort;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst QuickSort = ({ bars, setBars }) => {\n  const quickSortButton = () => {\n    console.log(\"quick sort button\");\n  };\n\n  // const quickSort = () => {\n  //   if (bars.length <= 1) {\n  //     return bars;\n  //   }\n  //   const pivot = bars[0];\n\n  //   const lessThan = bars.filter((element) => element < pivot);\n  //   const greaterThan = bars.filter((element) => element > pivot);\n  //   const equalTo = bars.filter((element) => element === pivot);\n\n  //   const lessThanSorted = quickSort(lessThan);\n  //   const greaterThanSorted = quickSort(greaterThan);\n\n  //   setBars([...lessThanSorted, ...equalTo, ...greaterThanSorted]);\n  // };\n\n  return (\n    <Button className=\"sort-button align-self-center\" onClick={quickSortButton}>\n      Quick Sort\n    </Button>\n  );\n};\n\nexport default QuickSort;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst InsertionSort = () => {\n  const insertionSortButton = () => {\n    console.log(\"insertion sort button\");\n  };\n\n  return (\n    <Button\n      className=\"sort-button align-self-center\"\n      onClick={insertionSortButton}\n    >\n      Insertion Sort\n    </Button>\n  );\n};\n\nexport default InsertionSort;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst BubbleSort = () => {\n  const bubbleSortButton = () => {\n    console.log(\"bubble sort button\");\n  };\n  return (\n    <Button\n      className=\"sort-button align-self-center\"\n      onClick={bubbleSortButton}\n    >\n      Bubble Sort\n    </Button>\n  );\n};\n\nexport default BubbleSort;\n","import React from \"react\";\n\nconst Timer = () => {\n  return <div className=\"footer-text\">Time Elapsed</div>;\n};\n\nexport default Timer;\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst Alerts = ({ showAlert, setShowAlert }) => {\n  if (showAlert) {\n    return (\n      <div className=\"value-alert\">\n        <Alert variant=\"danger\" onClose={() => setShowAlert(false)} dismissible>\n          <p>Min Value and Max Value cannot overlap</p>\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Alerts;\n","import React from \"react\";\nimport Stack from \"react-bootstrap/Stack\";\nimport NewBars from \"./NewBars\";\nimport BarSlider from \"./BarSlider\";\nimport BarValues from \"./BarValues\";\nimport MergeSort from \"./MergeSort\";\nimport QuickSort from \"./QuickSort\";\nimport InsertionSort from \"./InsertionSort\";\nimport BubbleSort from \"./BubbleSort\";\nimport Timer from \"./Timer\";\nimport Alerts from \"./Alerts\";\n\nconst Footer = ({\n  minBarValue,\n  maxBarValue,\n  numBars,\n  handleBarSliderChange,\n  handleMinValue,\n  handleMaxValue,\n  showAlert,\n  setShowAlert,\n  createBarArray,\n  bars,\n  setBars,\n}) => {\n  return (\n    <>\n      <Stack>\n        <Alerts showAlert={showAlert} setShowAlert={setShowAlert} />\n        <footer className=\"d-flex justify-content-evenly\">\n          <NewBars createBarArray={createBarArray} />\n          <BarSlider\n            numBars={numBars}\n            handleBarSliderChange={handleBarSliderChange}\n          />\n          <BarValues\n            numBars={numBars}\n            minBarValue={minBarValue}\n            maxBarValue={maxBarValue}\n            handleMinValue={handleMinValue}\n            handleMaxValue={handleMaxValue}\n          />\n          {/* <Stack> */}\n          <MergeSort />\n          <QuickSort bars={bars} setBars={setBars} />\n          {/* </Stack> */}\n          {/* <Stack> */}\n          <InsertionSort />\n          <BubbleSort />\n          {/* </Stack> */}\n          <div className=\"v-divider align-self-center\"></div>\n          <Timer />\n        </footer>\n      </Stack>\n    </>\n  );\n};\n\nexport default Footer;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState, useEffect } from \"react\";\nimport Bars from \"./components/Bars\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const [bars, setBars] = useState([]);\n  const [numBars, setNumBars] = useState(25);\n  const [minBarValue, setMinBarValue] = useState(20);\n  const [maxBarValue, setMaxBarValue] = useState(500);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleBarSliderChange = (e) => {\n    setNumBars(parseInt(e.target.value));\n    // console.log(\"number of bars\", numBars);\n  };\n\n  const handleMinValue = (e) => {\n    parseInt(e.target.value) < parseInt(maxBarValue)\n      ? setMinBarValue(parseInt(e.target.value))\n      : // console.log(\"min val is\", minBarValue)\n        setShowAlert(true);\n  };\n\n  const handleMaxValue = (e) => {\n    parseInt(e.target.value) > parseInt(minBarValue)\n      ? setMaxBarValue(parseInt(e.target.value))\n      : // console.log(\"min val is\", maxBarValue)\n        setShowAlert(true);\n  };\n\n  const randomNumsFromRange = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const createBarArray = () => {\n    let array = [];\n\n    for (let i = 0; i < numBars; i++) {\n      array.push(randomNumsFromRange(minBarValue, maxBarValue));\n    }\n    setBars(array);\n  };\n\n  useEffect(() => {\n    console.log(\"min val is\", minBarValue);\n  }, [minBarValue]);\n\n  useEffect(() => {\n    console.log(\"min val is\", maxBarValue);\n  }, [maxBarValue]);\n\n  return (\n    <>\n      <Footer\n        bars={bars}\n        setBars={setBars}\n        createBarArray={createBarArray}\n        numBars={numBars}\n        minBarValue={minBarValue}\n        maxBarValue={maxBarValue}\n        showAlert={showAlert}\n        setShowAlert={setShowAlert}\n        handleBarSliderChange={handleBarSliderChange}\n        handleMinValue={handleMinValue}\n        handleMaxValue={handleMaxValue}\n      />\n      <header>Sorting Visualizer</header>\n      <div className=\"bars d-flex justify-content-center align-items-end\">\n        <Bars\n          createBarArray={createBarArray}\n          bars={bars}\n          setBars={setBars}\n          numBars={numBars}\n          minBarValue={minBarValue}\n          maxBarValue={maxBarValue}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}